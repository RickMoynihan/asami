(ns ^{:doc "Common functionality for the entity reader/writer namespaces"
      :author "Paula Gearon"}
    asami.entity.general
  (:require [schema.core :as s :refer [=>]]
            [clojure.string :as string]
            #?(:clj [clojure.java.io :as io])
            #?(:clj [cheshire.core :as j])
            [naga.store :as store :refer [StorageType]]))

(def KeyValue [(s/one s/Keyword "Key") (s/one s/Any "Value")])

(def EntityMap {s/Keyword s/Any})

(s/defn existing-triples
  [storage id [k v]]
  (if-let [subpv (check-structure storage k v)]
    (cons [id k v] (mapcat (partial existing-triples storage v) subpv))
    [[id k v]]))

(s/defn json-update->triples :- [(s/one [Triple] "assertions") (s/one [Triple] "retractions")]
  "Takes a single structure and converts it into triples to be added and triples to be retracted to create a change"
  [storage id j]
  (binding [*current-storage* storage]
    (let [pvs (property-values storage id)
          old-node (pairs->struct storage pvs)
          to-remove (remove (fn [[k v]] (if-let [newv (get j k)] (= v newv))) old-node)
          pvs-to-remove (filter (comp (set (map first to-remove)) first) pvs)
          triples-to-remove (mapcat (partial existing-triples storage id) pvs-to-remove)

          to-add (remove (fn [[k v]] (when-let [new-val (get old-node k)] (= new-val v))) j)
          triples-to-add (doall (mapcat (partial property-vals id) to-add))]
      [triples-to-add triples-to-remove])))


